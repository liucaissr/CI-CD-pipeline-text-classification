#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

repopath=`git rev-parse --show-toplevel`

while read file; do
    if [[ $file == *.ipynb ]]; then 
    	# convert to html
    	filename=`basename $file .ipynb`
    	dir=`dirname $file`
		while read -p "Do you wish to covert notbook $file to html?" yn < /dev/tty; do
		    case $yn in
		        [Yy]* ) jupyter nbconvert --to notebook --execute --ExecutePreprocessor.timeout=-1 "$file"
						if [ $? -eq 0 ]; then
						    jupyter nbconvert "${dir}/${filename}.nbconvert.ipynb" --output-dir="${repopath}/train-report" --output="${filename}"
						else
						    exit 1
						fi
  						git add "${repopath}/train-report/${filename}.html"
  						git commit -m "export $file in train-report"
						break ;;
		        [Nn]* ) break ;;
		        * ) echo "Please answer yes or no.";;
		    esac
		done
    fi
done <<< "$(git diff --name-only origin/master..HEAD)"

exit 0
