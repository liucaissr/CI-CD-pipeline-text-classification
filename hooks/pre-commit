#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".


if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi


while read x file; do

    if [ "$x" == 'D' ]; then continue; fi
    if [[ $file == *.ipynb ]]; then 
    	# convert to html
    	pychanges=true
    fi
done <<< "$(git diff --cached --name-status $against)"


if  [[ "$pychanges" == true ]] ; then
    echo "changes in notebook found, dependencies update may required." 
	pip freeze > $PWD/train/src/main/docker/requirements.txt
	if [[ $(git diff $PWD/train/src/main/docker/requirements.txt | wc -l) -gt 0 ]] ; 
	#if [[ "$pychanges" == true ]] ; 
	then
		echo "updates in dependencies found"
		git diff $PWD/train/src/main/docker/requirements.txt
		# Allows us to read user input below, assigns stdin to keyboard
		exec < /dev/tty
		while read -p "Do you wish to update the dependencies?" yn; do
		    case $yn in
		        [Yy]* ) git add $PWD/train/src/main/docker/requirements.txt; break;;
		        [Nn]* ) git checkout -- $PWD/train/src/main/docker/requirements.txt; exit;;
		        * ) echo "Please answer yes or no.";;
		    esac
		done
	else
		echo "No updates in dependencies found, commiting..."
	fi
fi





